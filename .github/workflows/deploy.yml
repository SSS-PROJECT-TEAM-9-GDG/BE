name: Deploy To EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Create application.yml
        run: |
          pushd ./src/main
          mkdir -p resources
          cd resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.yml
          cat application.yml  # 생성된 파일을 출력하여 확인
          popd

      - name: Gradlew에 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: EC2에 JAR 파일을 업로드하기
        run: |
          # GitHub Secrets에서 개인 키를 파일로 저장
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # JAR 파일을 EC2로 업로드
          scp -i private_key.pem build/libs/sss-project-*.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ubuntu/sss-project.jar

      - name: SSH로 EC2에 접속하여 애플리케이션 실행하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # JAR 파일 실행
            nohup java -jar /home/ubuntu/sss-project.jar > /home/ubuntu/sss-project.log 2>&1 &
